name: Release

on:
    push:
        tags:
            - 'v[0-9]+.[0-9]+.[0-9]+*' # Matches v1.0.0, v1.0.0-alpha, v1.0.0-beta.1, etc.

env:
    CARGO_TERM_COLOR: always

jobs:
    build:
        name: Build Release Binaries
        strategy:
            matrix:
                include:
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      name: supertool-linux-x86_64
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                      name: supertool-windows-x86_64.exe
                    - os: macos-latest
                      target: universal-apple-darwin
                      name: supertool-macos-universal
        runs-on: ${{ matrix.os }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install Rust toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: |
                      x86_64-apple-darwin
                      aarch64-apple-darwin

            - name: Cache dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ matrix.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - name: Build binary (Linux/Windows)
              if: matrix.target != 'universal-apple-darwin'
              run: cargo build --release --target ${{ matrix.target }}

            - name: Build universal binary (macOS)
              if: matrix.target == 'universal-apple-darwin'
              run: |
                  cargo build --release --target x86_64-apple-darwin
                  cargo build --release --target aarch64-apple-darwin
                  lipo -create -output supertool-universal \
                      target/x86_64-apple-darwin/release/supertool \
                      target/aarch64-apple-darwin/release/supertool

            - name: Prepare binary (Linux)
              if: matrix.os == 'ubuntu-latest'
              run: cp target/${{ matrix.target }}/release/supertool ${{ matrix.name }}

            - name: Prepare binary (Windows)
              if: matrix.os == 'windows-latest'
              run: cp target/${{ matrix.target }}/release/supertool.exe ${{ matrix.name }}

            - name: Prepare binary (macOS Universal)
              if: matrix.target == 'universal-apple-darwin'
              run: cp supertool-universal ${{ matrix.name }}

            - name: Upload binary artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.name }}
                  path: ${{ matrix.name }}

    release:
        name: Create Release
        needs: build
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts

            - name: Create release
              uses: softprops/action-gh-release@v1
              with:
                  files: |
                      artifacts/supertool-linux-x86_64/supertool-linux-x86_64
                      artifacts/supertool-windows-x86_64.exe/supertool-windows-x86_64.exe
                      artifacts/supertool-macos-universal/supertool-macos-universal
                  generate_release_notes: true
                  draft: false
                  prerelease: ${{ contains(github.ref_name, '-') }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
